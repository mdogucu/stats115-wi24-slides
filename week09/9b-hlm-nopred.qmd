---
title: "Hierarchical Linear Models with No Predictors"
author: "Dr. Mine Dogucu"
execute:
  echo: true
format: 
  revealjs:
    footer: "[stats115.com](https://stats115.com)"
    slide-number: true
    incremental: true
    theme: ["../templates/slide-style.scss"]
    logo: "https://www.stats115.com/img/logo.png"
    title-slide-attributes: 
      data-background-image: "https://stats115.com/img/logo.png"
      data-background-size: 5%
      data-background-position: 50% 85%
    include-after-body: "../templates/clean_title_page.html"
---

```{r}
#| echo: false
library(bayesrules)
library(tidyverse)
library(rstanarm)
library(bayesplot)
library(janitor)
library(rstan)
library(tidybayes)
library(broom.mixed)
theme_set(theme_gray(base_size = 18))
```

##

The notes for this lecture are derived from  [Chapters 15 and 16 of the Bayes Rules! book](https://www.bayesrulesbook.com/chapter-15)


## Data - Running

```{r}

data(cherry_blossom_sample)

running <- cherry_blossom_sample %>% 
  select(runner, age, net)
glimpse(running)
```

##

```{r warning=FALSE}
ggplot(running, aes(x = runner, y = net)) + 
  geom_boxplot()

```



## Complete Pooling 


Complete pooling technique: combine all 252 observations across our 36 runners into one pool of information. 


```{r}
#| fig-align: center
ggplot(running, aes(y = net, x = age)) + 
  geom_point()
```



## Complete Pooling 


$$Y_i | \beta_0, \beta_1, \sigma \stackrel{ind}{\sim} N\left(\mu_i, \sigma^2\right) \;\; \text{ with } \;\; \mu_i = \beta_0 + \beta_1X_i$$

```{r cache=TRUE}
complete_pooled_model <- stan_glm(
  net ~ age, 
  data = running, family = gaussian, 
  prior_intercept = normal(0, 2.5, autoscale = TRUE),
  prior = normal(0, 2.5, autoscale = TRUE), 
  prior_aux = exponential(1, autoscale = TRUE),
  chains = 4, iter = 5000*2, refresh = 0, seed = 84735)
```





```{r}
tidy(complete_pooled_model, conf.int = TRUE, conf.level = 0.80)
```

##

```{r warning=FALSE, message=FALSE, fig.height=4}
# Plot of the posterior median model
ggplot(running, aes(x = age, y = net, group = runner)) + 
  geom_smooth(method = "lm", se = FALSE, color = "gray", size = 0.5) + 
  geom_abline(aes(intercept = 75.2, slope = 0.268), color = "blue")
```


##

```{r warning=FALSE, fig.height=3.5}
# Select an example subset
examples <- running %>% 
  filter(runner %in% c("1", "20", "22"))

ggplot(examples, aes(x = age, y = net)) + 
  geom_point() + 
  facet_wrap(~ runner) + 
  geom_abline(aes(intercept = 75.2242, slope = 0.2678), 
              color = "blue")
```

##

1. Though the observations on one runner might be independent of those on another, the observations _within_ a runner are _correlated_. That is, how fast a runner ran in their previous race tells us something about how fast they'll run in the next. 
2. With respect to the relationship between running time and age, people are inherently different.

##

Framework of a complete pooled model:

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/complete_pool_diagram.png")
```

. . .

Drawbacks of a complete pooling approach:


1. we violate the assumption of independence; and, in turn,
2. we might produce misleading conclusions about the relationship itself and the significance of this relationship.



## No pooling

```{r echo=FALSE, out.width="50%"}
knitr::include_graphics("img/no_pool_diagram.png")
```

. . .

No pooling approach builds a _separate_ model for each runner.

. . .

Let $(Y_{ij}, X_{ij})$ denote the observed run times and age for runner $j$ in their $i$th race.
Then the data structure for the Normal linear regression model of run time vs age for runner $j$ is:


$$Y_{ij} | \beta_{0j}, \beta_{1j}, \sigma \sim N\left(\mu_{ij}, \sigma^2\right) \;\; \text{ with } \;\; \mu_{ij} = \beta_{0j} + \beta_{1j} X_{ij}$$

. . .

This model allows for each runner $j$ to have a unique intercept $\beta_{0j}$ and age coefficient $\beta_{1j}$.



##

On the context of running, the no pooled models reflect the fact that some people tend to be faster than others (hence the different $\beta_{0j}$) and that _changes_ in speed over time aren't the same for everyone (hence the different $\beta_{1j}$).

##


```{r warning=FALSE, fig.height=3.5, echo=FALSE, message=FALSE}
ggplot(examples, aes(x = age, y = net)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE) + 
  facet_wrap(~ runner) + 
  xlim(52, 62)
```

Based on this model, what do you anticipate that your running time will be at the age of 55?

##

Drawbacks of a no pooling approach:

- We cannot reliably generalize or apply the group-specific no pooled models to groups outside those in our sample.
- No pooled models assume that one group doesnâ€™t contain relevant information about another, and thus ignores potentially valuable information. This is especially consequential when we have a small number of observations per group.



## Partial Pooling

```{r echo=FALSE, out.width="70%"}
knitr::include_graphics("img/partial_pool_diagram.png")
```


**Examples**: Students within classrooms, patients within hospitals, different runs for each runner (longitudunal, repeated-measures)



## Within-group variability

The degree of the variability among multiple observations _within_ each group can be interesting on its own. For example, we can examine how _consistent_ an _individual's_ running times are from year to year.
    
. . .

__Between-group variability__
    
Hierarchical data also allows us to examine the variability from group to group. For example, we can examine the degree to which running patterns _vary_ from individual to individual.

##

```{r}
data(spotify)

spotify <- spotify %>% 
  select(artist, title, popularity) %>% 
  mutate(artist = fct_reorder(artist, popularity, .fun = 'mean'))

glimpse(spotify)

nlevels(spotify$artist)
```

##

```{r}
artist_means <- spotify %>% 
  group_by(artist) %>% 
  summarize(count = n(), popularity = mean(popularity))

artist_means %>%
  slice(1:2, 43:44)
```

##

```{r echo=FALSE, out.width="100%"}
knitr::include_graphics("img/spotify-hierarchical-data-diagram.png")

```

## 

__Complete pooling__    

_Ignore_ artists and lump all songs together 

__No pooling__    

_Separately_ analyze each artist and assume that one artist's data doesn't contain valuable information about another artist 
    
__Partial pooling (via hierarchical models)__    

Acknowledge the grouping structure, so that even though artists differ in popularity, they might share valuable information about each other _and_ about the broader population of artists.
    


## The hierarchy

Layer 1:

$Y_{ij} | \mu_j, \sigma_y   \hspace{-0.075in} \sim \text{model of how song popularity varies WITHIN artist } j$

. . .

Layer 2:

$\mu_j | \mu, \sigma_\mu  \hspace{-0.075in} \sim \text{model of how the typical popularity} \mu_j \text{varies BETWEEN artists}$

. . .

Layer 3:

$\mu, \sigma_y, \sigma_\mu   \hspace{-0.075in} \sim \text{prior models for shared global parameters}$


##

- $\mu_j$ = mean song popularity for artist $j$; and
- $\sigma_y$ = __within-group variability__, i.e., the standard deviation in popularity from song to song within each artist.


##

Popularity varies from artist to artist.
We model this variability in mean popularity __between__ artists by assuming that the individual mean popularity levels, $\mu_j$, are _Normally_ distributed around $\mu$ with standard deviation $\sigma_\mu$

$$\mu_j | \mu, \sigma_\mu \sim N(\mu, \sigma^2_\mu)  .$$


- $\mu$ = the __global average__ of mean song popularity $\mu_j$ across all artists $j$, i.e., the mean popularity rating for the most average artist; and
- $\sigma_\mu$ = __between-group variability__, i.e., the standard deviation in mean popularity $\mu_j$ from artist to artist.

##

```{r}
ggplot(artist_means, aes(x = popularity)) + 
  geom_density()
```


##

__Notation alert__

- There's a difference between $\mu_j$ and $\mu$. When a parameter has a subscript $j$, it refers to a feature of group $j$. When a parameter _doesn't_ have a subscript $j$, it's the _global_ counterpart, i.e., the same feature across all groups.

- Subscripts signal the group or layer of interest. For example, $\sigma_y$ refers to the standard deviation of $Y$ values within each group, whereas $\sigma_\mu$ refers to the standard deviation of means $\mu_j$ from group to group.

##

```{r cache=TRUE}
spotify_hierarchical <- stan_glmer(
  popularity ~ (1 | artist), 
  data = spotify, family = gaussian,
  prior_intercept = normal(50, 2.5, autoscale = TRUE),
  prior_aux = exponential(1, autoscale = TRUE),
  prior_covariance = decov(reg = 1, conc = 1, shape = 1, scale = 1),
  chains = 4, iter = 5000*2, seed = 84735, refresh=FALSE)

```

- To indicate that the `artist` variable defines the group structure of our data, as opposed to it being a predictor of `popularity`, the appropriate formula here is `popularity ~ (1 | artist)`.
- The prior for $\sigma_\mu$ is specified by `prior_covariance`. For this particular model, with only one set of artist-specific parameters $\mu_j$, this is equivalent to an Exp(1) prior. (We will learn more about `prior_covariance` next lecture).

##


```{r fig.height=5}
pp_check(spotify_hierarchical) + 
  xlab("popularity")

```

##

```{r}
# Store the simulation in a data frame
spotify_hierarchical_df <- as.data.frame(spotify_hierarchical)

# Check out the first 3 and last 3 parameter labels
spotify_hierarchical_df %>% 
  colnames() %>% 
  as.data.frame() %>% 
  slice(1:3, 45:47)
```



## Posterior Analysis of Global Parameters

- $\mu$ = `(Intercept)`
- $\sigma_y$ = `sigma`
- $\sigma_\mu^2$ = `Sigma[artist:(Intercept),(Intercept)]`.This is not a typo. The default output gives us information about the _standard deviation_ within artists ( $\sigma_y$ ) but the _variance_ between artists ( $\sigma_\mu^2$ ).

##

```{r}
tidy(spotify_hierarchical, effects = "fixed", 
     conf.int = TRUE, conf.level = 0.80)
```

```{r echo = FALSE}
post_sum <- tidy(spotify_hierarchical, effects = "fixed", 
                 conf.int = TRUE, conf.level = 0.80)
post_sum_sig <- tidy(spotify_hierarchical, effects = "ran_pars",
                     conf.int = TRUE, conf.level = 0.80)
```

Pay attention to `effects = fixed`, where "fixed" is synonymous with "non-varying" or "global."

Per the results, there's an 80% chance that the _average_ artist has a mean popularity rating between `r round(post_sum[1,4],1)` and `r round(post_sum[1,5],1)`.

##

To call up the posterior medians for $\sigma_y$ and $\sigma_\mu$, we can specify `effects = "ran_pars"`, i.e., `par`ameters related to `ran`domness or variability:

```{r}
tidy(spotify_hierarchical, effects = "ran_pars")
```

The posterior median of $\sigma_y$ (`sd_Obervation.Residual`) suggests that, _within_ any given artist, popularity ratings tend to vary by `r round(post_sum_sig[2,3],1)` points _from song to song_.
The _between_ standard deviation $\sigma_\mu$ (`sd_(Intercept).artist`) tends to be slightly higher at around `r round(post_sum_sig[1,3],1)`.
Thus, the _mean_ popularity rating tends to vary by `r round(post_sum_sig[1,3],1)` points _from artist to artist_.


##

proportion of $\text{Var}(Y_{ij})$ that can be explained by differences in the observations within each group:

$$\frac{\sigma^2_y}{\sigma^2_\mu + \sigma^2_y}$$ 

<hr>

proportion of $\text{Var}(Y_{ij})$that can be explained by differences between groups

$$\frac{\sigma^2_\mu}{\sigma^2_\mu + \sigma^2_y}$$


##

These two sources of variability suggest that the popularity levels among multiple songs _by the same artist_ tend to have a moderate correlation near 0.54.

```{r}
15.1^2 / (15.1^2 + 14.0^2)
```

```{r echo = FALSE}
ratio <- round(round(post_sum_sig[1,3],1)^2 / (round(post_sum_sig[1,3],1)^2 + round(post_sum_sig[2,3],1)^2)*100)
```

. . .


Thinking of this another way, `r ratio`% of the variability in song popularity is explained by differences between artists, whereas `r 100-ratio`% is explained by differences among the songs within each artist:

```{r}
14.0^2 / (15.1^2 + 14.0^2)
```


## Posterior analysis of group-specific parameters

$$\mu_j = \mu + b_j $$

Here, $b_j$ describes the _difference_ between artist $j$'s mean popularity and the global mean popularity.

##

```{r}
artist_summary <- tidy(spotify_hierarchical, effects = "ran_vals", 
                       conf.int = TRUE, conf.level = 0.80)
# Check out the results for the first & last 2 artists
artist_summary %>% 
  select(level, conf.low, conf.high) %>% 
  slice(1:2, 43:44)
```

##

```{r echo = FALSE}
n <- length(levels(spotify$artist))
```

There's an 80% chance that `Camilo`'s mean popularity rating is between `r round(artist_summary[n,6], 1)` and  `r round(artist_summary[n,7], 1)` _above_ that of the average artist.

. . .


$$\mu_j = \mu + b_j = \text{(Intercept) + b[(Intercept) artist:j]} .$$

##


```{r warning=FALSE}
# Get MCMC chains for each mu_j
artist_chains <- spotify_hierarchical %>%
  tidybayes::spread_draws(`(Intercept)`, b[,artist]) %>% 
  mutate(mu_j = `(Intercept)` + b) 
# Check it out
artist_chains %>% 
  select(artist, `(Intercept)`, b, mu_j) %>% 
  head(4)
```

```{r echo = FALSE}
smaller <- artist_chains %>% 
  select(artist, `(Intercept)`, b, mu_j) %>% 
  head(4)
```

##

```{r}
# Get posterior summaries for mu_j
artist_summary_scaled <- artist_chains %>% 
  select(-`(Intercept)`, -b) %>% 
  tidybayes::mean_qi(.width = 0.80) %>% 
  mutate(artist = fct_reorder(artist, mu_j))

# Check out the results
artist_summary_scaled %>% 
  select(artist, mu_j, .lower, .upper) %>% 
  head(4)
```

##

```{r, fig.align="center", out.width="40%"}
ggplot(artist_summary_scaled, 
       aes(x = artist, y = mu_j, ymin = .lower, ymax = .upper)) +
  geom_pointrange() +
  xaxis_text(angle = 90, hjust = 1)
```

##


```{r}
artist_means %>% 
  filter(artist %in% c("Frank Ocean", "Lil Skies"))
```

Our posterior understanding of Frank Ocean is based on 40 songs, the most of any artist in the dataset, we have only 3 songs for Lil Skies. We naturally have greater posterior certainty about Frank Oceanâ€™s popularity, and hence narrower intervals.



## Posterior Prediction

First consider the __posterior prediction for an observed group__ or artist, Frank Ocean, the $j$ = `r sum((artist_means$artist == "Frank Ocean")*c(1:44))`th artist in our sample.

. . .

The first layer of our hierarchical model holds the key in this situation: it assumes that the popularity of individual Frank Ocean songs are Normally distributed around his own mean popularity level $\mu_j$ with standard deviation $\sigma_y$.

. . .

Thus, to approximate the posterior predictive model for the popularity of Ocean's _next_ song on Spotify, we can simulate a prediction from the Layer 1 model evaluated at each of the 20,000 MCMC parameter sets $\left\lbrace \mu_j^{(i)}, \sigma_y^{(i)}\right\rbrace$:

\begin{equation}
Y_{\text{new,j}}^{(i)} | \mu_j, \sigma_y  \; \sim \; N\left(\mu_j^{(i)}, \left(\sigma_y^{(i)}\right)^2\right).
\end{equation}


##

The resulting predictions $\left\lbrace Y_{\text{new},j}^{(1)}, Y_{\text{new},j}^{(2)}, \ldots, Y_{\text{new},j}^{(20000)} \right\rbrace$ and corresponding posterior predictive model will reflect two sources of variability, and hence uncertainty, in the popularity of Ocean's next song:

- __within-group sampling variability__ in $Y$, i.e., not all of Ocean's songs are equally popular; and

- __posterior variability__ in the model parameters $\mu_j$ and $\sigma_y$, i.e., the underlying mean and variability in popularity across Ocean's songs are unknown and can, themselves, vary.


##

```{r}
# Simulate Ocean's posterior predictive model
set.seed(84735)
ocean_chains <- spotify_hierarchical_df %>%
  rename(b = `b[(Intercept) artist:Frank_Ocean]`) %>% 
  select(`(Intercept)`, b, sigma) %>% 
  mutate(mu_ocean = `(Intercept)` + b,
         y_ocean = rnorm(20000, mean = mu_ocean, sd = sigma))

# Check it out
head(ocean_chains, 3)
```


##

```{r}
# Posterior summary of Y_new,j
ocean_chains %>% 
  tidybayes::mean_qi(y_ocean, .width = 0.80) 

# Posterior summary of mu_j
artist_summary_scaled %>% 
  filter(artist == "artist:Frank_Ocean")
```

##

Next consider __posterior prediction for a yet unobserved group__, Mohsen Beats.

. . .

No observed songs for Mohsen Beats means that we do _not_ have any information about their mean popularity $\mu_j$, and thus can't take the same approach as we did for Ocean.

##

What we _do_ know is this: (1) Mohsen Beats is an artist within the broader population of artists, (2) mean popularity levels among these artists are Normally distributed around some global mean $\mu$ with between-artist standard deviation $\sigma_\mu$ (Layer 2), and (3) our `r n` sampled artists have informed our posterior understanding of this broader population.
Then to approximate the posterior predictive model for the popularity of Mohsen Beats' next song, we can simulate 20,000 predictions $\left\lbrace Y_{\text{new},\text{mohsen}}^{(1)}, Y_{\text{new},\text{mohsen}}^{(2)}, \ldots, Y_{\text{new},\text{mohsen}}^{(20000)} \right\rbrace$ through a two-step process:

##

- __Step 1:__ Simulate a potential _mean_ popularity level $\mu_{\text{mohsen}}$ for Mohsen Beats by drawing from the Layer 2 model evaluated at each MCMC parameter set $\left\lbrace \mu^{(i)}, \sigma_\mu^{(i)}\right\rbrace$:

    $$\mu_{\text{mohsen}}^{(i)} | \mu, \sigma_\mu  \; \sim \; N\left(\mu^{(i)}, \left(\sigma_\mu^{(i)}\right)^2\right).$$

. . .

- __Step 2:__ Simulate a prediction of song popularity $Y_{\text{new},\text{mohsen}}$ from the Layer 1 model evaluated at each MCMC parameter set $\left\lbrace \mu_{\text{mohsen}}^{(i)}, \sigma_y^{(i)}\right\rbrace$:

    $$Y_{\text{new},\text{mohsen}}^{(i)} | \mu_{\text{mohsen}}, \sigma_y  \; \sim \; N\left(\mu_{\text{mohsen}}^{(i)}, \left(\sigma_y^{(i)}\right)^2\right).$$
    
##

The additional step in our Mohsen Beats posterior prediction process reflects a _third_ source of variability.
When predicting song popularity for a new group, we must account for:

- __within-group sampling variability__ in $Y$, i.e., not all of Mohsen Beats' _songs_ are equally popular;

- __between-group sampling variability__ in $\mu_j$, i.e., not all _artists_ are equally popular; and

- __posterior variability__ in the global model parameters $(\sigma_y, \mu, \sigma_\mu)$.

```{r echo = FALSE}
set.seed(84735)
mohsen_chains <- spotify_hierarchical_df %>%
  mutate(sigma_mu = sqrt(`Sigma[artist:(Intercept),(Intercept)]`),
         mu_mohsen = rnorm(20000, `(Intercept)`, sigma_mu),
         y_mohsen = rnorm(20000, mean = mu_mohsen, sd = sigma))
# Posterior predictive summaries
mohsen_summary <- mohsen_chains %>% 
  tidybayes::mean_qi(y_mohsen, .width = 0.80)
```


##

We're able to predict with 80% posterior certainty that their next song will have a popularity rating somewhere between `r round(mohsen_summary[2], 2)` and `r round(mohsen_summary[3], 2)`:

```{r}
set.seed(84735)
mohsen_chains <- spotify_hierarchical_df %>%
  mutate(sigma_mu = sqrt(`Sigma[artist:(Intercept),(Intercept)]`),
         mu_mohsen = rnorm(20000, `(Intercept)`, sigma_mu),
         y_mohsen = rnorm(20000, mu_mohsen, sigma))
# Posterior predictive summaries
mohsen_chains %>% 
  mean_qi(y_mohsen, .width = 0.80)
```

##

We can replicate the "by hand" simulations for Frank Ocean and Mohsen Beats using the `posterior_predict()` shortcut function.


```{r fig.width = 4, fig.height = 1.7, message=FALSE}
set.seed(84735)
prediction_shortcut <- posterior_predict(
  spotify_hierarchical,
  newdata = data.frame(artist = c("Frank Ocean", "Mohsen Beats")))
# Posterior predictive model plots
mcmc_areas(prediction_shortcut, prob = 0.8) +
  ggplot2::scale_y_discrete(labels = c("Frank Ocean", "Mohsen Beats"))
```

##

```{r eval=FALSE}
set.seed(84735)
predictions_hierarchical <- posterior_predict(spotify_hierarchical, 
                                              newdata = artist_means)

# Posterior predictive plots
ppc_intervals(artist_means$popularity, yrep = predictions_hierarchical, 
              prob_outer = 0.80) +
  ggplot2::scale_x_continuous(labels = artist_means$artist, 
                              breaks = 1:nrow(artist_means)) +
  xaxis_text(angle = 90, hjust = 1) + 
  geom_hline(yintercept = 58.4, linetype = "dashed")
```


##

```{r echo=FALSE}
set.seed(84735)
predictions_hierarchical <- posterior_predict(spotify_hierarchical, 
                                              newdata = artist_means)

# Posterior predictive plots
ppc_intervals(artist_means$popularity, yrep = predictions_hierarchical, 
              prob_outer = 0.80) +
  ggplot2::scale_x_continuous(labels = artist_means$artist, 
                              breaks = 1:nrow(artist_means)) +
  xaxis_text(angle = 90, hjust = 1) + 
  geom_hline(yintercept = 58.4, linetype = "dashed")
```

##

__Shrinkage__ refers to the phenomenon in which the group-specific local trends in a hierarchical model are pulled or _shrunk_ toward the global trends.



When utilizing weakly informative priors, the posterior mean predictions of song popularity from the hierarchical model are (roughly) weighted averages of those from the complete pooled ( $\overline{y}_{\text{global}}$ ) and no pooled ( $\overline{y}_j$ ) models:

$$\frac{\sigma^2_y}{\sigma^2_y + n_j \sigma^2_\mu} \overline{y}_{\text{global}} + \frac{n_j\sigma^2_\mu}{\sigma^2_y + n_j \sigma^2_\mu} \overline{y}_j$$


##

In posterior predictions for artist $j$, the _weights_ given to the global and local means depend upon how much data we have on artist $j$ ( $n_j$ ) as well as the comparison of the _within_-group and _between_-group variability in song popularity ( $\sigma_y$ and $\sigma_\mu$ ).
These weights highlight a couple of scenarios in which individualism fades, i.e., our hierarchical posterior predictions shrink away from the group-specific means $\overline{y}_j$ and toward the global mean $\overline{y}_\text{global}$:

##

- Shrinkage increases as the number of observations on group $j$, $n_j$, decreases. That is, we rely more and more on global trends to understand a group for which we have little data.
    
- Shrinkage increases when the variability within groups, $\sigma_y$, is large in comparison to the variability between groups, $\sigma_\mu$. That is, we rely more and more on global trends to understand a group when there is little distinction in the patterns from one group to the next.

